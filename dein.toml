[[plugins]]
    repo = 'Shougo/dein.vim'


[[plugins]]
    repo  = 'Shougo/vimproc.vim'
    build = 'make'


[[plugins]]
    repo = 'Shougo/denite.nvim'
    hook_add = '''
        autocmd FileType denite call s:denite_my_settings()
        function! s:denite_my_settings() abort
          nnoremap <silent><buffer><expr> <CR>
          \ denite#do_map('do_action')
          nnoremap <silent><buffer><expr> <esc>
          \ denite#do_map('quit')
          nnoremap <silent><buffer><expr> i
          \ denite#do_map('open_filter_buffer')
          nnoremap <silent><buffer><expr> <BS>
          \ denite#do_map('move_up_path')
          nnoremap <silent><buffer><expr> d
          \ denite#do_map('do_action', 'delete')
          nnoremap <silent><buffer><expr> p
          \ denite#do_map('do_action', 'preview')
        endfunction

        autocmd FileType denite-filter call s:denite_filter_my_setting()
        function! s:denite_filter_my_setting() abort
            nnoremap <silent><buffer><expr> <esc>   denite#do_map('quit')
            inoremap <silent><buffer><expr> <esc>   denite#do_map('quit')
            nnoremap <silent><buffer><expr> <BS>    denite#do_map('nop')
        endfunction

        nnoremap [denite] <Nop>
        nmap <Space>j [denite]
        nnoremap <silent> <space><space> :<C-u>Denite buffer -filter-updatetime=1 -start-filter<CR>
        nnoremap <silent> J :<C-u>Denite -resume -immediately -cursor-pos=+1<CR>
        nnoremap <silent> K :<C-u>Denite -resume -immediately -cursor-pos=-1<CR>
        nnoremap <silent> [denite]j :<C-u>Denite -resume -filter-updatetime=1<CR>
        nnoremap <silent> [denite]k :<C-u>Denite line -filter-updatetime=1 -start-filter<CR>
        nnoremap <silent> [denite]l :<C-u>Denite register -filter-updatetime=1<CR>
        nnoremap <silent> [denite]i :<C-u>Denite file/rec -filter-updatetime=1 -start-filter<CR>
        nnoremap <silent> [denite]o :<C-u>Denite file -filter-updatetime=1 -start-filter<CR>
        nnoremap <silent> [denite]h :<C-u>Denite help -filter-updatetime=1 -start-filter<CR>
        nnoremap <silent> [denite]; :<C-u>Denite grep -filter-updatetime=1 -start-filter<CR>

        call denite#custom#option('default', 'prompt', '>')
    '''


[[plugins]]
    repo = 'vim-airline/vim-airline'
    depends = ['vim-airline-themes']
    hook_add = '''
        let g:airline_powerline_fonts = 1
        let g:airline_theme = 'deus'
        let g:airline#extensions#tabline#enabled = 1
        nmap <C-j> <Plug>AirlineSelectNextTab
        nmap <C-k> <Plug>AirlineSelectPrevTab
        let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])

        " PowerlineÁ≥ª„Éï„Ç©„É≥„Éà„ÇíÂà©Áî®„Åô„Çã
        let g:airline_powerline_fonts = 1
        if !exists('g:airline_symbols')
          let g:airline_symbols = {}
        endif

        " unicode symbols
        let g:airline_left_sep = '¬ª'
        let g:airline_left_sep = '‚ñ∂'
        let g:airline_right_sep = '¬´'
        let g:airline_right_sep = '‚óÄ'
        let g:airline_symbols.crypt = 'üîí'
        let g:airline_symbols.linenr = '‚ò∞'
        let g:airline_symbols.linenr = '‚êä'
        let g:airline_symbols.linenr = '‚ê§'
        let g:airline_symbols.linenr = '¬∂'
        let g:airline_symbols.maxlinenr = ''
        let g:airline_symbols.maxlinenr = '„èë'
        let g:airline_symbols.branch = '‚éá'
        let g:airline_symbols.paste = 'œÅ'
        let g:airline_symbols.paste = '√û'
        let g:airline_symbols.paste = '‚à•'
        let g:airline_symbols.spell = 'Íû®'
        let g:airline_symbols.notexists = '‚àÑ'
        let g:airline_symbols.whitespace = 'Œû'

        " powerline symbols
        let g:airline_left_sep = 'ÓÇ∞'
        let g:airline_left_alt_sep = 'ÓÇ±'
        let g:airline_right_sep = 'ÓÇ≤'
        let g:airline_right_alt_sep = 'ÓÇ≥'
        let g:airline_symbols.branch = 'ÓÇ†'
        let g:airline_symbols.readonly = 'ÓÇ¢'
        let g:airline_symbols.linenr = '‚ò∞'
        let g:airline_symbols.maxlinenr = 'ÓÇ°'
    '''


[[plugins]]
    repo = 'vim-airline/vim-airline-themes'


[[plugins]]
    repo = 'tpope/vim-fugitive'
    hook_add = '''
        nnoremap <silent><C-g> :vertical bo Gstatus<CR>
        nnoremap <C-t> :Gpush<CR>
        nnoremap <silent><C-b> :vertical bo Gdiff<CR>
    '''


[[plugins]]
    repo = 'airblade/vim-gitgutter'
    hook_add = '''
        set updatetime=500
        let g:gitgutter_map_keys = 0
        nmap <C-u> <Plug>GitGutterUndoHunk
        nmap <C-n> <Plug>GitGutterStageHunk
        nmap <C-a> <Plug>GitGutterNextHunk
        nmap <C-x> <Plug>GitGutterPrevHunk
        nmap <C-o> <Plug>GitGutterPreviewHunk
        omap ic <Plug>GitGutterTextObjectInnerPending
        omap ac <Plug>GitGutterTextObjectOuterPending
        xmap ic <Plug>GitGutterTextObjectInnerVisual
        xmap ac <Plug>GitGutterTextObjectOuterVisual
        nnoremap + :GitGutterBufferToggle<CR>
        nnoremap <silent> <Space>g :GitGutterAll<CR>
    '''


[[plugins]]
    repo = 'Shougo/defx.nvim'
    hook_add = '''
        nnoremap <silent> <Space>F :Defx -new -listed -buffer-name=""<CR>

        autocmd FileType defx call s:defx_my_settings()
        function! s:defx_my_settings() abort
            " Define mappings
            nnoremap <silent><buffer><expr> j
            \ line('.') == line('$') ? 'gg' : 'j'
            nnoremap <silent><buffer><expr> k
            \ line('.') == 1 ? 'G' : 'k'
            nnoremap <silent><buffer><expr> h
            \ defx#do_action('cd', ['..'])
            nnoremap <silent><buffer><expr> l
            \ defx#do_action('open')
            nnoremap <silent><buffer><expr> i
            \ defx#do_action('toggle_select')
            nnoremap <silent><buffer><expr> o
            \ defx#do_action('new_file')
            nnoremap <silent><buffer><expr> O
            \ defx#do_action('new_directory')
            nnoremap <silent><buffer><expr> ;
            \ defx#do_action('change_vim_cwd')
            nnoremap <silent><buffer><expr> u
            \ defx#do_action('cd', $PWD)
            nnoremap <silent><buffer><expr> c
            \ defx#do_action('copy')
            nnoremap <silent><buffer><expr> x
            \ defx#do_action('move')
            nnoremap <silent><buffer><expr> p
            \ defx#do_action('paste')
            nnoremap <silent><buffer><expr> d
            \ defx#do_action('remove')
            nnoremap <silent><buffer><expr> r
            \ defx#do_action('rename')
            nnoremap <silent><buffer><expr> *
            \ defx#do_action('toggle_select_all')
            nnoremap <silent><buffer><expr> .
            \ defx#do_action('toggle_ignored_files')
            nnoremap <silent><buffer><expr> 0
            \ defx#do_action('redraw')
            nnoremap <silent><buffer><expr> z
            \ defx#do_action('execute_system')
            nnoremap <silent><buffer><expr> yy
            \ defx#do_action('yank_path')
            nnoremap <silent><buffer><expr> <C-g>
            \ defx#do_action('print')
        endfunction
    '''


[[plugins]]
    repo = 'cohama/lexima.vim'
    hook_add = '''
        call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': ['tex', 'markdown']})
        call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': ['tex', 'markdown']})
        call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': ['tex', 'markdown']})
        call lexima#add_rule({'char': '<CR>', 'at': '\$\$\%#', 'input_after': '<CR>$$', 'filetype': ['markdown'] })
        call lexima#add_rule({'char': '<BS>', 'at': '\$\$\n\%#\n\$\$', 'delete': 3, 'filetype': ['markdown']})

        call lexima#add_rule({'char': '(', 'at': '\\left\%#', 'input_after': ' \right)', 'filetype': ['tex', 'markdown']})
        call lexima#add_rule({'char': '<BS>', 'at': '\\left(\%#',
        \ 'input': '<BS><BS><BS><BS><BS><BS><Del><Del><Del><Del><Del><Del><Del><Del>', 'filetype': ['tex', 'markdown']})
        call lexima#add_rule({'char': '[', 'at': '\\left\%#', 'input_after': ' \right]', 'filetype': ['tex', 'markdown']})
        call lexima#add_rule({'char': '<BS>', 'at': '\\left[\%#',
        \ 'input': '<BS><BS><BS><BS><BS><BS><Del><Del><Del><Del><Del><Del><Del><Del>', 'filetype': ['tex', 'markdown']})
        call lexima#add_rule({'char': '{', 'at': '\\left\\\%#', 'input_after': ' \right\}', 'filetype': ['tex', 'markdown']})
        call lexima#add_rule({'char': '<BS>', 'at': '\\left\\{\%#',
        \ 'input': '<BS><BS><BS><BS><BS><BS><BS><Del><Del><Del><Del><Del><Del><Del><Del><Del>', 'filetype': ['tex', 'markdown']})
        call lexima#add_rule({'char': '{', 'at': '\\\%#', 'input_after': ' \}', 'filetype' : ['tex', 'markdown']})
        call lexima#add_rule({'char': '<BS>', 'at': '\\{\%#', 'input': '<BS><BS><Del><Del><Del>', 'filetype' : ['tex', 'markdown']})

        inoremap <C-l> <C-r>=lexima#insmode#leave(1, '<LT>C-G>U<LT>RIGHT>')<CR>
        inoremap <C-h> <C-r>=lexima#insmode#leave_all('<LT>C-G>U<LT>LEFT>')<CR>
        inoremap <Tab> <C-r>=lexima#insmode#leave_all('<LT>TAB>')<CR>
    '''


[[plugins]]
    repo = 'rhysd/clever-f.vim'
    hook_add = '''
        let g:clever_f_not_overwrites_standard_mappings = 1
        map <expr> f expand("<cword>")!~"^$" ? "<Plug>(clever-f-f)" : ""
        map <expr> F expand("<cword>")!~"^$" ? "<Plug>(clever-f-F)" : ""
        nmap <space>f <Plug>(clever-f-reset)
        let g:clever_f_smart_case = 1
        let g:clever_f_mark_direct = 1
        let g:clever_f_chars_match_any_signs = ";"
    '''


[[plugins]]
    repo = 'easymotion/vim-easymotion'
    hook_add = '''
        let g:EasyMotion_do_mapping = 0
        nmap , <Plug>(easymotion-overwin-f2)
        vmap , <Plug>(easymotion-bd-f2)
        map ; <Plug>(easymotion-bd-jk)
        nmap ; <Plug>(easymotion-overwin-line)
    '''


[[plugins]]
    repo = 'tpope/vim-commentary'


[[plugins]]
    repo = 'tpope/vim-surround'
    hook_add = '''
        nmap S ysiW
        nmap SS ysiw<space><space>
    '''


[[plugins]]
    repo = 'tpope/vim-repeat'


[[plugins]]
    repo = 'vim-jp/vimdoc-ja'


[[plugins]]
    repo = 'nathanaelkane/vim-indent-guides'
    hook_add = '''
        nnoremap <silent>\| :IndentGuidesToggle<CR>
        let g:indent_guides_guide_size = 1
        let g:indent_guides_exclude_filetypes = ['help']
        let g:indent_guides_auto_colors = 0
        autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=214
        autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=75
    '''


[[plugins]]
    repo = 'thinca/vim-quickrun'
    hook_add = '''
        let g:quickrun_config = {
            \ '_' : {
                \ 'runner' : 'vimproc',
                \ 'runner/vimproc/updatetime' : 40,
                \ 'outputter' : 'error',
                \ 'outputter/error/success' : 'buffer',
                \ 'outputter/error/error'   : 'quickfix',
                \ 'outputter/buffer/split' : ':botright 10sp',
            \ }
        \}

        " ÂÆüË°åÊôÇ„Å´ÂâçÂõû„ÅÆË°®Á§∫ÂÜÖÂÆπ„Çí„ÇØ„É≠„Éº„Ç∫&‰øùÂ≠ò„Åó„Å¶„Åã„ÇâÂÆüË°å
        let g:quickrun_no_default_key_mappings = 1
        nmap <Space>r :cclose<CR>:QuickRun -mode n<CR>
        nnoremap <silent><Space>e :<C-u>bw! \[quickrun\ output\]<CR>:bw split<CR>
    '''
