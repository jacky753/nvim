[[plugins]]
    repo = 'Shougo/deoplete.nvim'
    on_ft = ['ruby', 'eruby', 'tex', 'slim', 'python']
    hook_source = '''
        let g:deoplete#enable_at_startup = 1

        inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"

        inoremap <silent><expr> <C-j>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "" :
        \ deoplete#mappings#manual_complete()
        function! s:check_back_space() abort "{{{
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
        endfunction"}}}
        inoremap <silent><expr><C-k> pumvisible() ? "\<c-p>" : ""
        inoremap <silent><expr>jj pumvisible() ? "\<C-y>" : ""


        call deoplete#custom#option({
        \ 'auto_complete_delay': 0,
        \ 'smart_case': v:true,
        \ 'max_list': 20,
        \ 'on_insert_enter' : v:false,
        \ 'on_text_changed_i': v:true,
        \ 'min_pattern_length': 1,
        \ })

        call deoplete#custom#option('keyword_patterns', {'ruby': '[a-zA-Z_]\w*[!?]?',})
        call deoplete#custom#source('omni', 'functions', {'ruby':  'rubycomplete#Complete',})
        call deoplete#custom#var('omni', 'input_patterns', {'ruby': ['[^. *\t]\.\w*', '[a-zA-Z_]\w*::'],})

        call deoplete#custom#option('keyword_patterns', {'slim': '[a-zA-Z_]\w*[!?]?',})
        call deoplete#custom#var('omni', 'input_patterns', {'slim': ['[^. *\t]\.\w*', '[a-zA-Z_]\w*::'],})

        call deoplete#custom#var('omni', 'input_patterns', {
                \ 'tex': g:vimtex#re#deoplete
                \})
    '''


[[plugins]]
    repo = 'w0rp/ale'
    on_ft = ['ruby', 'eruby', 'python']
    hook_source = '''
        let g:ale_sign_error = '⨉'
        let g:ale_sign_warning = '⚠'
        let g:ale_lint_on_enter = 1
        let g:ale_lint_on_save = 1
        let g:ale_lint_on_text_changed = 0

        " flake8をLinterとして登録
        let g:ale_linters = {
            \ 'python': ['flake8'],
            \ }

        " 各ツールをFixerとして登録
        let g:ale_fixers = {
            \ 'python': ['autopep8', 'black', 'isort']
            \ }

        " 各ツールの実行オプションを変更してPythonパスを固定
        let g:ale_python_flake8_executable = g:python3_host_prog
        let g:ale_python_flake8_options = '-m flake8 --ignore=I201,W391,I100,E203'
        let g:ale_python_autopep8_executable = g:python3_host_prog
        let g:ale_python_autopep8_options = '-m autopep8'
        let g:ale_python_isort_executable = g:python3_host_prog
        let g:ale_python_isort_options = '-m isort -fss'
        let g:ale_python_black_executable = g:python3_host_prog
        let g:ale_python_black_options = '-m black --line-length=79'

        " ついでにFixを実行するマッピングしとく
        nmap <silent> <Leader>x <Plug>(ale_fix)
        " ファイル保存時に自動的にFixするオプションもあるのでお好みで
        let g:ale_fix_on_save = 1
    '''


[[plugins]]
    repo = 'slim-template/vim-slim'
    on_ft = ['slim']


[[plugins]]
    repo = 'Vimjas/vim-python-pep8-indent'
    on_ft = ['python']


[[plugins]]
    repo = 'deoplete-plugins/deoplete-jedi'
    on_ft = ['python']
    hook_source = '''
        " nvimのpythonのpath
        let g:deoplete#sources#jedi#python_path = $PYENV_PATH . '/versions/neovim3/bin/python'
        " 型情報で補完を選別する
        let g:deoplete#sources#jedi#enable_typeinfo = 1
        " docをプレビューウィンドウに表示させない
        let g:deoplete#sources#jedi#show_docstring = 0
    '''

[[plugins]]
    repo = 'fs111/pydoc.vim'
    on_ft = ['python']
    hook_source = '''
        " PATHを通す代わり
        let g:pydoc_cmd = 'python -m pydoc'
        " 縦分割で開く
        let g:pydoc_open_cmd = 'vertical botright split'
        " ハイライトを無効
        let g:pydoc_highlight = 0
        " マッピングを無効
        let g:pydoc_perform_mappings = 0
        " 補完のプレビューウィンドウを表示させない
        set completeopt-=preview
        " 補完が一つであってもポップアップメニューを使う
        set completeopt+=menuone
        " 補完のカーソルを一つ目に合わせておく
        set completeopt+=noinsert
        " 補完関連のメッセージを表示しない
        set shortmess+=c
    '''


[[plugins]]
    repo = 'plasticboy/vim-markdown'
    on_ft = ['markdown']
    hook_source = '''
        nnoremap $ <esc>o<div style="text-align:center;"><img src="" width=50%></div><esc>F"i
        inoremap <expr> <C-e> expand("<cWORD>")=~"^\\" ? "\<esc>yyplcwend\<esc>O\<Tab>" : ""
        " 折りたたみを無効
        let g:vim_markdown_folding_disabled = 1
        " 折りたたみのレベルを設定
        let g:vim_markdown_folding_level = 2
        " 強調を一行に制限
        let g:vim_markdown_emphasis_multiline = 0
        " イタリックなどを conceal しない
        let g:vim_markdown_conceal = 0
        " コードブロックを conceal しない
        let g:vim_markdown_conceal_code_blocks = 0
        " 数式を conceal しない
        let g:tex_conceal = ""
        " $x$ でインライン数式 $$x$$ でディスプレイ数式
        let g:vim_markdown_math = 1
        " 自動で箇条書きの接頭語を挿入する
        let g:vim_markdown_auto_insert_bullets = 0
        let g:vim_markdown_new_list_item_indent = 0
    '''


[[plugins]]
    repo = 'iamcco/markdown-preview.nvim'
    on_ft = ['markdown', 'pandoc.markdown', 'rmd']
    build = 'cd app & yarn install'
    hook_source = '''
        nmap @ <Plug>MarkdownPreviewToggle
        " markdown バッファを開いたときにプレビューを表示する
        let g:mkdp_auto_start = 0
        " 違うバッファに映った時にプレビューを閉じる
        let g:mkdp_auto_close = 0
        " セーブしたタイミングのみプレビューを更新する
        let g:mkdp_refresh_slow = 0
        " .md 以外のファイルに対しても有効にする
        let g:mkdp_command_for_global = 0
        " set to 1, preview server available to others in your network by default, the server listens on localhost (127.0.0.1)
        let g:mkdp_open_to_the_world = 0
        " use custom IP to open preview page useful when you work in remote vim and preview on local browser
        let g:mkdp_open_ip = ''
        " プレビューページを開くブラウザを指定する
        let g:mkdp_browser = 'Google Chrome' 
        " set to 1, echo preview page url in command line when open preview page
        let g:mkdp_echo_preview_url = 0
        " a custom vim function name to open preview page. this function will receive url as param
        let g:mkdp_browserfunc = ''
        " use a custom markdown style must be absolute path
        let g:mkdp_markdown_css = ''
        " use a custom highlight style must absolute path
        let g:mkdp_highlight_css = ''
        " use a custom port to start server or random for empty
        let g:mkdp_port = ''
        " preview page title
        " ${name} will be replace with the file name
        let g:mkdp_page_title = '${name}'
        " options for markdown render
        " mkit: markdown-it options for render
        " katex: katex options for math
        " uml: markdown-it-plantuml options
        " maid: mermaid options
        " disable_sync_scroll: if disable sync scroll, default 0
        " sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
        "   middle: mean the cursor position alway show at the middle of the preview page
        "   top: mean the vim top viewport alway show at the top of the preview page
        "   relative: mean the cursor position alway show at the relative positon of the preview page
        " hide_yaml_meta: if hide yaml metadata, default is 1
        " sequence_diagrams: js-sequence-diagrams options
        let g:mkdp_preview_options = {
            \ 'mkit': {},
            \ 'katex': {},
            \ 'uml': {},
            \ 'maid': {},
            \ 'disable_sync_scroll': 0,
            \ 'sync_scroll_type': 'middle',
            \ 'hide_yaml_meta': 1,
            \ 'sequence_diagrams': {}
            \ }
    '''


[[plugins]]
    repo = 'godlygeek/tabular'
    on_ft = ['markdown']
    hook_source = '''
        nnoremap <silent> # :<C-u>TableFormat<CR>
    '''


[[plugins]]
    repo = 'cespare/vim-toml'
    on_ft = ['toml']


[[plugins]]
    repo = 'inkarkat/vim-SyntaxRange'
    on_ft = ['toml']


# call map(dein#check_clean(), "delete(v:val, 'rf')")が使えなくなる
[[plugins]]
    repo = 'lervag/vimtex'
    on_ft = ['tex']
    hook_source = '''
        " skimとの連携の設定このurlの場所からパクった
        " https://qiita.com/KeitaNakamura/items/87dad47dc09ae8bf6abf
        let g:vimtex_compiler_progname = 'nvr'
        let g:vimtex_view_general_viewer = '/Applications/Skim.app/Contents/SharedSupport/displayline'
        let g:vimtex_view_general_options = '@line @pdf @tex'
        " 消してなければ自分で書いたドキュメントにこの後の設定の説明があるはず
        let g:vimtex_complete_close_braces = 1
        let g:vimtex_imaps_enabled = 0
        let g:vimtex_mappings_disable = {
            \ 'n': ['<localleader>lr', '<localleader>lm', 'tsc', 'tse', 'tsd', 'tsD', '<F7>'],
            \ 'x': ['tsd', 'tsD', '<F7>'],
            \ 'i': ['<F7>'],
            \}
        nmap @ <plug>(vimtex-compile)
        nmap # <plug>(vimtex-view)
        nmap $ <plug>(vimtex-toc-open)
        imap <C-e> <plug>(vimtex-delim-close)
        nmap <Space>k <plug>(vimtex-doc-package)
        " 警告のみの時は quickfix を開かない
        let g:vimtex_quickfix_open_on_warning = 0
        " quickfix を自動的に閉じる
        let g:vimtex_quickfix_autoclose_after_keystrokes = 2
        " 折りたたみを有効にする
        let g:vimtex_fold_enabled = 1
        " toc を左側に幅広く表じさせる
        let g:vimtex_toc_config = {
            \ 'show_help': 0,
            \ 'split_pos': 'vert rightbelow',
            \ 'split_width' : 60,
            \ 'todo_sorted': 0,
            \}
    '''
